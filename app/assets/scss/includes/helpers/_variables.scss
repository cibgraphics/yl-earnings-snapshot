/*
-----------------------------------------
WIDTHS
-----------------------------------------
*/

:root {
  --yl-site-width: 1200px;
  --yl-radius: 20px;
}

/*
-----------------------------------------
COLORS
-----------------------------------------
*/
:root {
  // PRIMARY

  // NEUTRAL
  --yl-white: #fff;
  --yl-gray-05: #f4f4f4;
  --yl-gray-10: #e6e6e6;
  --yl-gray-20: #cccccc;
  --yl-gray-30: #b3b3b3;
  --yl-gray-40: #b3b3b3;
  --yl-gray-50: #808080;
  --yl-gray-60: #666666;
  --yl-gray-70: #4d4d4d;
  --yl-gray-80: #333333;
  --yl-gray-90: #1a1a1a;
  --yl-black: #000;

  // Forms

  --yl-base-color: var(--yl-yl-white);
  --yl-content-background: var(--yl-yl-white);

  // Text
  --yl-text-color: var(--yl-yl-black);
  --yl-link-color: var(--yl-yl-primary);

  // User Select (colors when a user selects objects on screen)
  --yl-select-background: var(--yl-yl-olive);
  --yl-select-text: var(--yl-yl-white);

  --yl-placeholder-color: var(--yl-yl-gray-30);
}

/*
-----------------------------------------
FONTS
-----------------------------------------
*/

// Font Family
:root {
  --yl-base-font-size-strip: 16;
  --yl-base-font-size: var(--yl-yl-base-font-size-strip) * 1px;

  --yl-font-serif: "Domaine Display", serif;
  --yl-font-sans: "GT Walsheim Pro", sans-serif;

  --yl-font-weight-xlight: 300;
  --yl-font-weight-light: 400;
  --yl-font-weight-normal: 500;
  --yl-font-weight-bold: 600;
}

$font-size: 16px; // This is a SCSS variable for the mixin function

/*
-----------------------------------------
BREAKPOINTS
-----------------------------------------
*/

$breakpoints: (
  "desktop-wide": 1248px,
  "desktop": 1024px,
  "desktop-small": 992px,
  "tablet-wide": 850px,
  "tablet": 768px,
  "tablet-small": 720px,
  "phone-wide": 600px,
  "phone": 480px,
  "phone-small": 400px,
);

@mixin mq($width, $type: ">=") {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
  }
  // For the future
  // @media only screen and (width #{$type} $width) {
  //   @content;
  // }

  @if $type == ">=" {
    @media only screen and (min-width: $width) {
      @content;
    }
  } @else if $type == "<=" {
    @media only screen and (max-width: $width) {
      @content;
    }
  } @else if $type == ">" {
    @media only screen and (min-width: $width + 1px) {
      @content;
    }
  } @else if $type == "<" {
    @media only screen and (max-width: $width - 1px) {
      @content;
    }
  }
}

@mixin container($width, $containerName: "", $type: ">=") {
  $widthValue: null;

  // Check if the width is a key in the breakpoints map and get the corresponding value
  @if map_has_key($breakpoints, $width) {
    $widthValue: map_get($breakpoints, $width);
  } @else {
    $widthValue: $width;
  }

  // For the future
  // @container #{$containerName} (width #{$type} #{$width}) {
  //   @content;
  // }

  @if $type == ">=" {
    @container #{$containerName} (min-width: #{$widthValue}) {
      @content;
    }
  } @else if $type == "<=" {
    @container #{$containerName} (max-width: #{$widthValue}) {
      @content;
    }
  } @else if $type == ">" {
    @container #{$containerName} (min-width: #{($widthValue + 1px)}) {
      @content;
    }
  } @else if $type == "<" {
    @container #{$containerName} (max-width: #{($widthValue + 1px)}) {
      @content;
    }
  }
}
